<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>controller_set</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CONTROL SETTINGS

show_debug_overlay(true);
//win_x = window_get_x();
//win_y = window_get_y();
//display_reset(2,false);
//window_set_position(win_x,win_y);

/*//Player 1
gp_pause[1] = 137;
gp_up[1] = 300;
gp_down[1] = 300;
gp_left[1] = 300;
gp_right[1] = 300;
gp_special[1] = 129;
gp_weak[1] = 131;
gp_strong[1] = 128;
gp_jump[1] = 130;
gp_shield[1] = 132;
gp_charge[1] = 133;*/

//Player 1
gp_pause[1] = gp_start;
gp_up[1] = gp_padu;
gp_down[1] = gp_padd;
gp_left[1] = gp_padl;
gp_right[1] = gp_padr;
gp_special[1] = gp_face2;
gp_weak[1] = gp_face3;
gp_strong[1] = gp_face4;
gp_jump[1] = gp_face1;
gp_shield[1] = gp_shoulderl;
gp_charge[1] = gp_shoulderr;

//Player 2
gp_pause[2] = ord('R');
gp_up[2] = ord('W');
gp_down[2] = ord('S');
gp_left[2] = ord('A');
gp_right[2] = ord('D');
gp_special[2] = ord('P');
gp_weak[2] = ord('M');
gp_strong[2] = ord('K');
gp_jump[2] = vk_space;
gp_shield[2] = ord('Q');
gp_charge[2] = ord('E');

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CONTROLLER

//Player 2 is stored first, then shifted with Player 1 stored last
data = 0;
p = 2;
repeat 2
{
    /*//Pause button
    if joystick_check_button(1,10)
        p_button = 1;
    else
        p_button = 0;
    
    //Keypad movement mapping
    m_button = 5 + floor(joystick_xpos(1)) - 3*floor(joystick_ypos(1));
    
    if joystick_check_button(1,2)
        a_button = 1;//Special
    else if joystick_check_button(1,4)
    {
        a_button = 2;//Weak
    }
    else if joystick_check_button(1,1)
        a_button = 3;//Strong
    else if joystick_check_button(1,3)
        a_button = 4;//Jump
    else
        a_button = 0;
    
    if joystick_check_button(1,5)
        h_button = 1;//Shield
    else if joystick_check_button(1,6)
        h_button = 2;//Charge
    else
        h_button = 0;*/
    
    //Pause button
    if /*joystick_check_button(1,gp_pause[p]-127)*/ gamepad_button_check(0,gp_pause[p]) or keyboard_check(gp_pause[p])
        p_button = 1;
    else
        p_button = 0;
    
    //Keypad movement mapping
    if gamepad_is_connected(p-1)//gp_up[p]==300
    {
        //m_button = 5 + floor(joystick_xpos(1)) - 3*floor(joystick_ypos(1));
        m_button = 5+(gamepad_button_check(0,gp_right[p]) - gamepad_button_check(0,gp_left[p]))
                  +3*(gamepad_button_check(0,gp_up[p]) - gamepad_button_check(0,gp_down[p]));
    }
    else
        m_button = 5+(keyboard_check(gp_right[p]) - keyboard_check(gp_left[p]))
                  +3*(keyboard_check(gp_up[p]) - keyboard_check(gp_down[p]));
    
    if /*joystick_check_button(1,gp_special[p]-127)*/ gamepad_button_check(0,gp_special[p]) or keyboard_check(gp_special[p])
        a_button = 1;//Special
    else if /*joystick_check_button(1,gp_weak[p]-127)*/ gamepad_button_check(0,gp_weak[p]) or keyboard_check(gp_weak[p])
        a_button = 2;//Weak
    else if /*joystick_check_button(1,gp_strong[p]-127)*/ gamepad_button_check(0,gp_strong[p]) or keyboard_check(gp_strong[p])
        a_button = 3;//Strong
    else if /*joystick_check_button(1,gp_jump[p]-127)*/ gamepad_button_check(0,gp_jump[p]) or keyboard_check(gp_jump[p])
        a_button = 4;//Jump
    else
        a_button = 0;
    
    if /*joystick_check_button(1,gp_shield[p]-127)*/ gamepad_button_check(0,gp_shield[p]) or keyboard_check(gp_shield[p])
        h_button = 1;//Shield
    else if /*joystick_check_button(1,gp_charge[p]-127)*/ gamepad_button_check(0,gp_charge[p]) or keyboard_check(gp_charge[p])
        h_button = 2;//Charge
    else
        h_button = 0;
    
    //Data string of hhaaammmmp
    data = (data&lt;&lt;10) + (h_button&lt;&lt;8) + (a_button&lt;&lt;5) + (m_button&lt;&lt;1) + p_button;
    p--;
}

//Send data to next logic block
if instance_exists(director)
{
    director.data = data;
}
else
{
    puppeteer.data = data;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
