<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


//scr_create_animation_vertex_format();//create animation format.

//animation
//animation = scr_load_animation("./animation",1,15,"./animation_000001.mtl");//load animation
//We only need 1 material file, as every other exportet .mtl File has the same information anyway.

animation_length = room_speed*7; //specify the animation length/speed for 1 animation loop (room_speed*7 = 7 seconds)
animation_step = 0;//this variable is holding the current animation progress (leave it to 0)





//------------------------------------shader variables--------------------------------

//interpolation value
global.shader_interpol = shader_get_uniform(sh_blend, "u_interpol"); //make it global, so that the "scr_draw_animation_frame" script can call it from anywhere in the project
//WARNING! This variable must be named "global.shader_interpol"! Don't change the name unless you want to edit the variable name in the scripts!

//define light uniforms
shader_ambientColor = shader_get_uniform(sh_blend, "uAmbientColor"); //ambient light (color) 
shader_lightDirection = shader_get_uniform(sh_blend, "uLightingDirection"); //direction of directional light
shader_lightDirectionalColor = shader_get_uniform(sh_blend, "uDirectionalColor"); //color of directional light




z = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//animate
animation_step+=+1;
if (animation_step&gt;=animation_length){
    animation_step = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    /*var pc = (animation_step/animation_length);
    var frame_count = ds_list_size(animation);
    
    
    var currentframe = floor(pc*frame_count);
    var nextframe = currentframe+1;
    if (nextframe &gt;= frame_count){nextframe=0;};
    
draw_text(0,16,"Interpolating between frame: "+string(currentframe+1)+"-"+string(nextframe+1));
draw_text(0,32,"Interpolation value: "+string(pc*frame_count-floor(pc*frame_count)));
draw_text(0,64,"Press &amp; hold the left mouse button to move the camera.#Use the mouse wheel to zoom in and out.");*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*draw_set_color(c_white);

//use animation shader
shader_set(sh_blend);

    //set lighting
    shader_set_uniform_f(shader_ambientColor,0.3,0.3,0.3);
    shader_set_uniform_f(shader_lightDirection,0.5,-0.5,0.5);
    shader_set_uniform_f(shader_lightDirectionalColor,1,1,1);

    //draw animation
    scr_draw_animation_frame(animation,animation_step,animation_length);
       
shader_reset();*/
   
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
