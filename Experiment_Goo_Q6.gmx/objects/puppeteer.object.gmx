<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>puppeteer_set</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RECORD

data = 10;
playb = 1;
g_sync = 0;
g_past = 0;
tick = 0;
ping = 0;
ping2 = 0;
ping_avr = 0;
ping_h = 0;
ping_m = 0;

//Get file ready for reading
if !score//Local setup
{   online = 0;
    if file_exists("record_l.txt")//Playback or recording
    {   line = "record_l.txt";
        file = file_text_open_read(working_directory + line);
    }
    else//Playback of host
    {   if file_exists("record_h.txt")
            line = "record_h.txt";
        else//One game self loop
            line = "record_c.txt";
        file = file_text_open_read(working_directory + line);
        repeat 6 file_text_readln(file);
    }
    stager.g_ready = 1;
}
else//Online setup
{   online = 1;
    host = score - 1;
    if host
        line = "record_h.txt";
    else
        line = "record_c.txt";
    file = file_text_open_read(working_directory + line);
    
    username = file_text_read_string(file);
    file_text_readln(file);
    ip = file_text_read_string(file);
    file_text_readln(file);
    port = file_text_read_real(file);
    file_text_readln(file);
    userother = file_text_read_string(file);
    file_text_readln(file);
    ipp[0] = file_text_read_string(file);
    file_text_readln(file);
    ipp[1] = file_text_read_real(file);
    file_text_readln(file);
    
    //connect = 0;
    data_t = ds_queue_create();
    buffer_pak = buffer_create(24,buffer_fixed,1);//in B: r[mMMMPPSSmMMM]|w[]
    peer = network_create_server(network_socket_udp,port,1);
}

data1 = file_text_read_real(file);
file_text_readln(file);
data2 = file_text_read_real(file);
file_text_readln(file);
data3 = file_text_read_real(file);
file_text_readln(file);

//Get file ready for recording, otherwise, playback
if room == asset_get_index("battle_room")
{   file_text_close(file);
    file = file_text_open_append(working_directory + line);
    playb--;
}

stager.data1 = data1;
stager.data2 = data2;
stager.data3 = data3&gt;&gt;2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GAME READY

if online
{   if tick == -1
    {   stager.g_ready = 0;
        //stager.alarm[0] = stager.alarm[0] + 1;
    }
    else// if g_ready
        stager.g_ready = 1;
}
//else
  //  stager.g_ready = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PUPPETEER

/*
if joystick_check_button(1, 4)
{
    playb=1;
    file_text_close(file);
    file = file_text_open_read(working_directory + "record.txt");
}
if joystick_check_button(1, 3) and !playb
{
    //file = file_text_open_append(working_directory + "record.txt");
    file_text_write_real(file, data);
    file_text_writeln(file);
    //file_text_close(file);
}
if playb
{
    data = file_text_read_real(file);
    file_text_readln(file);
    if file_text_eof(file)
    {
        playb=0;
        file_text_close(file);
        file = file_text_open_append(working_directory + "record.txt");
    }
}
*/
//data = data1&lt;&lt;30;
//data = 999 + (data1+536870912);

//Recording
if room == asset_get_index("battle_room")
{   if online//Online
    {   g_sync = 60 * stager.clock_s + stager.alarm[0];
        if ds_queue_size(data_t) &lt; 2
        {   if host
                data &amp;= 1023;
            else
                data = data&gt;&gt;10;
            do{
                buffer_seek(buffer_pak,buffer_seek_start,0);
                buffer_write(buffer_pak,buffer_u32,ping2);
                buffer_write(buffer_pak,buffer_u16,g_sync);
                buffer_write(buffer_pak,buffer_u16,data);
                buffer_write(buffer_pak,buffer_u32,current_time);
                nettest = network_send_udp(peer,ipp[0],ipp[1],buffer_pak,buffer_tell(buffer_pak));
            }until nettest&gt;=0;
            ping2 = 0;
            ds_queue_enqueue(data_t,data);
        }
        
        if ds_queue_size(data_t) == 2
        {   buffer_seek(buffer_pak,buffer_seek_start,12);
            ping = buffer_read(buffer_pak,buffer_u32);
            g_past = buffer_read(buffer_pak,buffer_u16);
            ping = current_time - ping;
            if ping &lt; 1000
            {   ping_h++;
                ping_avr = (ping + ping_avr * (ping_h-1)) / ping_h;
            }
            else
                ping_m++;
            
            if (g_sync+1) &gt;= g_past
            {   line = buffer_read(buffer_pak,buffer_u16);
                ping2 = buffer_read(buffer_pak,buffer_u32);
                data = ds_queue_dequeue(data_t);
                if host
                    data += (line&lt;&lt;10);
                else
                    data = (data&lt;&lt;10) + line;
                file_text_write_real(file,((data&amp;1046528)&gt;&gt;2) + ((data&amp;1022)&gt;&gt;1));
                file_text_writeln(file);
                tick = 1;
            }
            else
                tick = -1;
        }
    }
    ////
    else if !stager.m_pause//Local
    {   file_text_write_real(file,((data&amp;1046528)&gt;&gt;2) + ((data&amp;1022)&gt;&gt;1));
        file_text_writeln(file);
    }
}

//Playback
else
{   if file_text_eof(file)
        data = 1;
    else
    {   line = file_text_read_real(file);
        data = ((line&amp;261632)&lt;&lt;2) + (data&amp;1024) + ((line&amp;511)&lt;&lt;1) + (data&amp;1);
        file_text_readln(file);
    }
}

if !online or tick
{   stager.data = data;
    tick = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CONNECTION

if ds_map_find_value(async_load,"type") == network_type_data
{   //ipp[0] = ds_map_find_value(async_load,"ip");
    //ipp[1] = ds_map_find_value(async_load,"port");
    //sz = ds_map_find_value(async_load,"size");
    //sock = ds_map_find_value(async_load,"socket");
    //socket = ds_map_find_value(async_load,"id");
    var buff = ds_map_find_value(async_load,"buffer");
    buffer_copy(buff,0,12,buffer_pak,12);
    //buffer_seek(buffer_pak,buffer_seek_start,12);
    //connect = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
