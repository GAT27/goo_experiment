<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>puppeteer_set</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RECORD HOST

data = 10;
g_ready = 0;
g_sync = 0;
g_past = 0;
tick = 0;
ping = 0;
ping2 = 0;
ping_avr = 0;
ping_h = 0;
ping_m = 0;

globalvar file;
file = file_text_open_read(working_directory + "record.txt");
data1 = file_text_read_real(file);
file_text_readln(file);
data2 = file_text_read_real(file);
file_text_readln(file);
data3 = file_text_read_real(file);
file_text_close(file);
online = data3 &amp; 1;
host = (data3&gt;&gt;1)&amp;1;

if room==asset_get_index("battle_room")
{
    if online
    {
        connect = 0;
        peer = -1;
        get_lk = 0;
        get_lh = -1;
        get_hs = -1;
        get_cs = -1;
        retry_cnt = 5;
        punch = 0;
        data_t = ds_queue_create();
        buffer_pak = buffer_create(24,buffer_fixed,1);//in B: r[mMMMPPSSmMMM]|w[]
        
        for(port=6510;peer&lt;0;port++)
            peer = network_create_server(network_socket_udp,port,2);
        port--;
        show_debug_message("UDP " + string(port));
        request = "http://www.shadespeed.com/storage.php?game="+string(game_id)
                + "&amp;query=timeout_set_variable&amp;variable=tip_address&amp;value=user_ip"
                + "&amp;timeout=20&amp;data=0";
        get_ip = http_get(request);
        if !host
            data2 = data1;
    }
    else
        file = file_text_open_append(working_directory + "record.txt");
}
else
{
    file = file_text_open_read(working_directory + "record.txt");
    repeat 3 file_text_readln(file);
    online = 0;
}

stager.data1 = data1;
stager.data2 = data2;
stager.data3 = data3&gt;&gt;2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RETRY SERVER

switch get_id
{
    case get_ip:    get_ip = http_get(request);
                    break;
    case get_lh:    get_lh = http_get(request);
                    break;
    case get_hs:    get_hs = http_get(request);
                    break;
    case get_cs:    get_cs = http_get(request);
                    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GAME READY

if online
{
    if tick == -1
    {
        stager.g_ready = 0;
        stager.alarm[0] = stager.alarm[0] + 1;
    }
    else if g_ready
        stager.g_ready = 1;
}
else
    stager.g_ready = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///PUPPETEER

/*
if joystick_check_button(1, 4)
{
    playb=1;
    file_text_close(file);
    file = file_text_open_read(working_directory + "record.txt");
}

if joystick_check_button(1, 3) and !playb
{
    //file = file_text_open_append(working_directory + "record.txt");
    file_text_write_real(file, data);
    file_text_writeln(file);
    //file_text_close(file);
}

if playb
{
    data = file_text_read_real(file);
    file_text_readln(file);
    if file_text_eof(file)
    {
        playb=0;
        file_text_close(file);
        file = file_text_open_append(working_directory + "record.txt");
    }
}
*/
//data = data1&lt;&lt;30;
//data = 999 + (data1+536870912);

if room==asset_get_index("battle_room")
{
    if online
    {
        if g_ready//Online and connected
        {
            g_sync = 60 * stager.clock_s + stager.alarm[0];
            if ds_queue_size(data_t)&lt;2
            {
                if host
                    data &amp;= 1023;
                else
                    data = (data&gt;&gt;10)&amp;1023;
                do{
                    buffer_seek(buffer_pak,buffer_seek_start,0);
                    buffer_write(buffer_pak,buffer_u32,ping2);
                    buffer_write(buffer_pak,buffer_u16,g_sync);
                    buffer_write(buffer_pak,buffer_u16,data);
                    buffer_write(buffer_pak,buffer_u32,current_time);
                    nettest = network_send_udp(socket,ipp[0],ipp[1],buffer_pak,buffer_tell(buffer_pak));
                }until nettest&gt;=0;
                ping2 = 0;
                ds_queue_enqueue(data_t,data);
            }
            if ds_queue_size(data_t)==2
            {
                buffer_seek(buffer_pak,buffer_seek_start,12);
                ping = buffer_read(buffer_pak,buffer_u32);
                g_past = buffer_read(buffer_pak,buffer_u16);
                ping = current_time - ping;
                if ping &lt; 1000
                {
                    ping_h++;
                    ping_avr = (ping + ping_avr * (ping_h-1)) / ping_h;
                }
                else
                    ping_m++;
                if (g_sync+1) &gt;= g_past
                {
                    line = buffer_read(buffer_pak,buffer_u16);
                    ping2 = buffer_read(buffer_pak,buffer_u32);
                    data = ds_queue_dequeue(data_t);
                    if host
                        data += (line&lt;&lt;10);
                    else
                    {
                        data = (data&lt;&lt;10) + line;
                        file_text_write_real(file,((data&amp;1046528)&gt;&gt;2) + ((data&amp;1022)&gt;&gt;1));
                        file_text_writeln(file);
                    }
                    tick = 1;
                }
                else
                    tick = -1;
            }
        }
        ////
        else if connect//Finish up conections
        {
            if host
            {
                buffer_seek(buffer_pak,buffer_seek_start,12);
                data2 = buffer_read(buffer_pak,buffer_u32);
                stager.data2 = data2;
                g_ready = 1;
                //connect = 0;
                punch--;
            }
            else
            {
                buffer_seek(buffer_pak,buffer_seek_start,12);
                data1 = buffer_read(buffer_pak,buffer_u32);
                stager.data1 = data1;
                g_ready = 1;
                //connect = 0;
                punch--;
                
                file = file_text_open_write(working_directory + "record.txt");
                file_text_write_real(file,data1);
                file_text_writeln(file);
                file_text_write_real(file,data2);
                file_text_writeln(file);
                file_text_write_real(file,data3);
                file_text_writeln(file);
            }
        }
        ////
        else if punch//Hole punching
        {
            buffer_seek(buffer_pak,buffer_seek_start,0);
            buffer_write(buffer_pak,buffer_u32,data1);
            nettest = network_send_udp(peer,ipp[0],ipp[1],buffer_pak,buffer_tell(buffer_pak));
            blah=1;
        }
    }
    
    else//Offline
    {
        file_text_write_real(file,((data&amp;1046528)&gt;&gt;2) + ((data&amp;1022)&gt;&gt;1));
        file_text_writeln(file);
    }
}
else//Replay
{
    if file_text_eof(file)
        data = 1;
    else
    {
        line = string(file_text_read_real(file));
        data = ((line&amp;261632)&lt;&lt;2) + (data&amp;1024) + ((line&amp;511)&lt;&lt;1) + (data&amp;1);
        file_text_readln(file);
    }
}

if !online or tick
{
    stager.data = data;
    tick = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CONNECTION

if ds_map_find_value(async_load,"type") == network_type_data
{
    ipp[0] = ds_map_find_value(async_load,"ip");
    ipp[1] = ds_map_find_value(async_load,"port");
    //sz = ds_map_find_value(async_load,"size");
    //sock = ds_map_find_value(async_load,"socket");
    socket = ds_map_find_value(async_load,"id");
    var buff = ds_map_find_value(async_load,"buffer");
    buffer_copy(buff,0,12,buffer_pak,12);
    //buffer_seek(buffer_pak,buffer_seek_start,12);
    connect = 1;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RENDEZVOUS

get_id = ds_map_find_value(async_load,"id");
switch get_id
{
    //Capture current public ip and port
    case get_ip:    if get_lk == 0
                    {
                        status = ds_map_find_value(async_load,"http_status");
                        if ds_map_find_value(async_load,"status") == 0
                        {
                            ipp[0] = ds_map_find_value(async_load,"result");
                            //Confirm ip on server, go collect it
                            if real(string_digits(ipp[0])) == 1
                            {
                                request = "http://www.shadespeed.com/storage.php?game="+string(game_id)
                                        + "&amp;query=timeout_all_variable&amp;variable=tip_address";
                                get_ip = http_get(request);
                            }
                            //Failure on ip confirm or collect, retry
                            else if real(string_digits(ipp[0])) == 0
                            {
                                retry_cnt--;
                                alarm[0] = room_speed * 2;
                            }
                            //Collected ip, store it for self and delete on server
                            else
                            {
                                retry_cnt = 5;
                                tip = ds_list_create();
                                tip = ds_map_find_value(json_decode(ipp[0]),"default");
                                ip = ds_list_find_value(tip[|0],0);
                                ipp[0] = ip;
                                ipp[1] = port;
                                ipp[2] = 0;
                                ds_list_destroy(tip);
                                
                                request = "http://www.shadespeed.com/storage.php?game="+string(game_id)
                                        + "&amp;query=timeout_delete_variable&amp;variable=tip_address&amp;value=user_ip";
                                if host
                                {
                                    get_lh = http_get(request);
                                    get_lk++;//LOCKED
                                }
                                else
                                {
                                    get_cs = http_get(request);
                                    get_lk = 3;//LOCKED
                                }
                            }
                        }
                        else//Error, retry
                        {
                            retry_cnt--;
                            alarm[0] = room_speed * 2;
                        }
                    }
                    break;
                    
    //Check number of lobbies and add host
    case get_lh:    if get_lk == 1
                    {
                        status = ds_map_find_value(async_load,"http_status");
                        if ds_map_find_value(async_load,"status") == 0
                        {
                            lobby = ds_map_find_value(async_load,"result");
                            //Confirm deletion on server, go collect lobbies
                            if real(string_digits(lobby)) == 1
                            {
                                request = "http://www.shadespeed.com/storage.php?game="+string(game_id)
                                        + "&amp;query=timeout_all_variable&amp;variable=ip_address";
                                get_lh = http_get(request);
                            }
                            //Failure on deletion or lobby collect, retry
                            else if real(string_digits(lobby)) == 0
                            and string(lobby) != "[]"
                            {
                                retry_cnt--;
                                alarm[0] = room_speed * 2;
                            }
                            //Collected lobbies, find top lobby and create lobby on top to host
                            else
                            {
                                retry_cnt = 5;
                                tip = ds_list_create();
                                tip = ds_map_find_value(json_decode(lobby),"default");
                                if ds_list_size(tip)
                                    lobby = ds_list_find_value(tip[|ds_list_size(tip)-1],0) + 1;
                                else
                                    lobby = 0;
                                ds_list_destroy(tip);
                                
                                request = "http://www.shadespeed.com/storage.php?game="+string(game_id)
                                        + "&amp;query=timeout_set_variable&amp;variable=ip_address"
                                        + "&amp;value="+string(lobby)+"&amp;timeout=1200&amp;data="+string(ipp);
                                get_hs = http_get(request);
                                get_lk++;//LOCKED
                            }
                        }
                        else//Error, retry
                        {
                            retry_cnt--;
                            alarm[0] = room_speed * 2;
                        }
                    }
                    break;
                    
    //Keep checking host on server until client is captured
    case get_hs:    if get_lk == 2
                    {
                        status = ds_map_find_value(async_load,"http_status");
                        if ds_map_find_value(async_load,"status") == 0
                        {
                            client = ds_map_find_value(async_load,"result");
                            //Confirm either host on server or client capture
                            if real(string_digits(client)) == 1
                            {
                                if punch == 0//Hosting, go collect lobbies
                                {
                                    request = "http://www.shadespeed.com/storage.php?game="+string(game_id)
                                            + "&amp;query=timeout_all_variable&amp;variable=ip_address";
                                    get_hs = http_get(request);
                                    punch--;
                                    show_debug_message("HOST ONLINE");
                                }
                                else//Capturing, start hole punching
                                {
                                    punch = 1;
                                    get_lk = 99;//LOCKED AND DONE
                                    show_debug_message("CLIENT CAPTURED");
                                }
                            }
                            //Failure on hosting or lobby collect/delete, retry
                            else if real(string_digits(client)) == 0
                            {
                                if punch == 0
                                    retry_cnt--;
                                alarm[0] = room_speed * 2;
                            }
                            //Collected lobbies, find owned lobby and see if there is a trade
                            else
                            {
                                tip = ds_list_create();
                                tip = ds_map_find_value(json_decode(client),"default");
                                for(var i=ds_list_size(tip)-1;ds_list_find_value(tip[|i],0)!=lobby;i--){};
                                client = ds_list_find_value(tip[|i],1);
                                ipp[2] = real(string_char_at(client,string_length(client)-2));
                                ds_list_destroy(tip);
                                
                                if ipp[2]//If traded, capture client ip and port and delete lobby
                                {
                                    ipp[0] = string_copy(client,3,string_pos(',',client)-3);
                                    ipp[1] = real(string_copy(client,string_pos(',',client)+1,
                                                  string_length(client)-string_pos(',',client)-4));
                                    request = "http://www.shadespeed.com/storage.php?game="+string(game_id)
                                            + "&amp;query=timeout_delete_variable&amp;variable=ip_address"
                                            + "&amp;value="+string(lobby);
                                    get_hs = http_get(request);
                                }
                                else//Otherwise, retry later
                                    alarm[0] = room_speed * 2;
                            }
                        }
                        else//Error, retry
                        {
                            if punch == 0
                                retry_cnt--;
                            alarm[0] = room_speed * 2;
                        }
                    }
                    break;
                    
    //Client selection on server to trade ip address with host
    case get_cs:    if get_lk == 3
                    {
                        status = ds_map_find_value(async_load,"http_status");
                        if ds_map_find_value(async_load,"status") == 0
                        {
                            ipp[2] = ds_map_find_value(async_load,"result");
                            //Confirm either deletion on server or ip trade
                            if real(string_digits(ipp[2])) == 1
                            {
                                if punch == 0//Deleting, go collect lobbies
                                {
                                    request = "http://www.shadespeed.com/storage.php?game="+string(game_id)
                                            + "&amp;query=timeout_all_variable&amp;variable=ip_address";
                                    get_cs = http_get(request);
                                    punch--;
                                }
                                else//Trading, start hole punching
                                {
                                    punch = 1;
                                    get_lk = 99;//LOCKED AND DONE
                                    show_debug_message("IP TRADED");
                                }
                            }
                            //Failure on deletion, lobby collect, or trade confirm, retry
                            else if real(string_digits(ipp[2])) == 0
                            {
                                retry_cnt--;
                                alarm[0] = room_speed * 2;
                            }
                            //Collected lobbies, auto select top lobby to join and trade
                            else
                            {
                                retry_cnt = 5;
                                tip = ds_list_create();
                                tip = ds_map_find_value(json_decode(ipp[2]),"default");
                                lobby = ds_list_find_value(tip[|ds_list_size(tip)-1],0);
                                ipp[2] = 1;
                                
                                request = "http://www.shadespeed.com/storage.php?game="+string(game_id)
                                        + "&amp;query=timeout_set_variable&amp;variable=ip_address"
                                        + "&amp;value="+string(lobby)+"&amp;timeout=20&amp;data="+string(ipp);
                                get_cs = http_get(request);
                                
                                lobby = ds_list_find_value(tip[|ds_list_size(tip)-1],1);
                                ipp[0] = string_copy(lobby,3,string_pos(',',lobby)-3);
                                ipp[1] = real(string_copy(lobby,string_pos(',',lobby)+1,
                                              string_length(lobby)-string_pos(',',lobby)-4));
                                ds_list_destroy(tip);
                            }
                        }
                        else//Error, retry
                        {
                            retry_cnt--;
                            alarm[0] = room_speed * 2;
                        }
                    }
                    break;
}

if retry_cnt&lt;0
{
    file_text_close(file);
    d3d_end();
    d3d_set_lighting(false);
    network_destroy(puppeteer.peer);
    buffer_delete(puppeteer.buffer_pak);
    ds_queue_destroy(puppeteer.data_t);
    room_goto(stage_room);
    show_debug_message("CONNECTION FAILED");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
